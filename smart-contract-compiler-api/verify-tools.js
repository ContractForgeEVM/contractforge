#!/usr/bin/env node

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

console.log('üîç V√©rification des Outils d\'Audit de S√©curit√©')
console.log('================================================')

// Test 1: V√©rifier Solhint
console.log('\n1Ô∏è‚É£ Test de Solhint...')
try {
  const solhintVersion = execSync('npx solhint --version', { encoding: 'utf8' }).trim()
  console.log(`‚úÖ Solhint version: ${solhintVersion}`)
  
  // Test avec un contrat simple
  const testContract = `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract TestContract {
    uint256 public value;
    
    function setValue(uint256 _value) public {
        value = _value;
    }
}`
  
  fs.writeFileSync('test_solhint.sol', testContract)
  
  const solhintConfig = {
    extends: "solhint:recommended",
    rules: {
      "avoid-sha3": "warn",
      "avoid-throw": "error",
      "no-empty-blocks": "warn",
      "no-inline-assembly": "warn",
      "max-line-length": "off",
      "compiler-version": "off"
    }
  }
  
  fs.writeFileSync('.solhint.json', JSON.stringify(solhintConfig, null, 2))
  
  try {
    const solhintResult = execSync('npx solhint test_solhint.sol --config .solhint.json', { encoding: 'utf8' })
    console.log('‚úÖ Solhint fonctionne correctement')
    console.log('üìä R√©sultats Solhint:')
    console.log(solhintResult)
  } catch (error) {
    console.log('‚úÖ Solhint fonctionne (d√©tecte des probl√®mes comme attendu)')
    console.log('üìä Sortie Solhint:')
    console.log(error.stdout || error.message)
  }
  
} catch (error) {
  console.log('‚ùå Solhint non disponible:', error.message)
}

// Test 2: V√©rifier Slither
console.log('\n2Ô∏è‚É£ Test de Slither...')
try {
  const slitherVersion = execSync('python3 -m slither --version', { encoding: 'utf8' }).trim()
  console.log(`‚úÖ Slither version: ${slitherVersion}`)
  
  // Test avec notre wrapper Python
  try {
    const slitherResult = execSync('python3 slither_wrapper.py test_solhint.sol TestContract', { encoding: 'utf8' })
    console.log('‚úÖ Slither wrapper fonctionne correctement')
    console.log('üìä R√©sultats Slither:')
    console.log(slitherResult)
  } catch (error) {
    console.log('‚ùå Slither wrapper √©choue:', error.message)
  }
  
} catch (error) {
  console.log('‚ùå Slither non disponible:', error.message)
}

// Test 3: V√©rifier l'API compl√®te
console.log('\n3Ô∏è‚É£ Test de l\'API d\'Audit...')
try {
  const apiResult = execSync('curl -s -X POST http://localhost:3004/api/security-audit/audit -H "Content-Type: application/json" -d \'{"contractName": "TestContract", "sourceCode": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract TestContract {\\n    uint256 public value;\\n    \\n    function setValue(uint256 _value) public {\\n        value = _value;\\n    }\\n}"}\'', { encoding: 'utf8' })
  
  const result = JSON.parse(apiResult)
  if (result.success) {
    console.log('‚úÖ API d\'audit fonctionne correctement')
    console.log(`üìä Score: ${result.data.score}/100 (Grade: ${result.data.grade})`)
    console.log(`üõ†Ô∏è Outils utilis√©s: ${result.data.toolsUsed.join(', ')}`)
    console.log(`‚è±Ô∏è Temps d'audit: ${result.data.auditTime}ms`)
    console.log(`üéØ Pass√©: ${result.data.passed ? '‚úÖ OUI' : '‚ùå NON'}`)
    
    console.log('\nüìã Probl√®mes d√©tect√©s:')
    result.data.issues.forEach((issue, index) => {
      console.log(`   ${index + 1}. [${issue.severity}] ${issue.title}`)
      console.log(`      Outil: ${issue.tool}`)
      console.log(`      Ligne: ${issue.line}`)
      console.log(`      Description: ${issue.description}`)
    })
  } else {
    console.log('‚ùå API d\'audit √©choue:', result.message)
  }
  
} catch (error) {
  console.log('‚ùå API d\'audit non disponible:', error.message)
}

// Test 4: V√©rifier la sant√© de l'API
console.log('\n4Ô∏è‚É£ Test de sant√© de l\'API...')
try {
  const healthResult = execSync('curl -s http://localhost:3004/api/security-audit/health', { encoding: 'utf8' })
  const health = JSON.parse(healthResult)
  console.log('‚úÖ API en bonne sant√©:', health.status)
  console.log('üõ†Ô∏è Outils disponibles:', health.tools)
} catch (error) {
  console.log('‚ùå API de sant√© non disponible:', error.message)
}

// Nettoyage
console.log('\nüßπ Nettoyage...')
try {
  fs.unlinkSync('test_solhint.sol')
  fs.unlinkSync('.solhint.json')
  console.log('‚úÖ Fichiers temporaires supprim√©s')
} catch (error) {
  console.log('‚ö†Ô∏è Erreur lors du nettoyage:', error.message)
}

console.log('\nüéâ V√©rification termin√©e !') 