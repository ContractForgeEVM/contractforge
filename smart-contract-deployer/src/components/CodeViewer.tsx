import { useState, useEffect } from 'react'
import { Box, Paper, Typography, IconButton, Tooltip, Chip, CircularProgress } from '@mui/material'
import { ContentCopy, Check } from '@mui/icons-material'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'
import type { ContractTemplate, DeploymentParams } from '../types'
import { useTranslation } from 'react-i18next'
import { useChainId } from 'wagmi'

interface CodeViewerProps {
  template: ContractTemplate
  params: Record<string, any>
}

const CodeViewer = ({ template, params }: CodeViewerProps) => {
  const { t } = useTranslation()
  const chainId = useChainId()
  const [code, setCode] = useState<string>('')
  const [copied, setCopied] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3004'
  const PREVIEW_API_URL = `${API_BASE_URL}/api/web/preview`

  useEffect(() => {
    const fetchCodePreview = async () => {
      try {
        setLoading(true)
        setError(null)
        
        const requestData = {
          templateType: template.id,
          features: params.premiumFeatures || [],
          params,
          featureConfigs: params.featureConfigs || {}
        }

        console.log('üëÅÔ∏è Fetching code preview from backend...')
        console.log('üìã Request data:', requestData)

        const response = await fetch(PREVIEW_API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer cfk_master_key_contractforge_production_2024_SECURE'
          },
          body: JSON.stringify(requestData)
        })

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}))
          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)
        }

        const result = await response.json()
        
        if (!result.success) {
          throw new Error(result.error || 'Failed to generate code preview')
        }

        console.log('‚úÖ Code preview received from backend')
        setCode(result.sourceCode)
        
      } catch (error: any) {
        console.error('‚ùå CodeViewer - Error fetching code preview:', error)
        setError(error.message || 'Error generating contract code')
        setCode('// Error generating contract code\n// Please check your connection and try again')
      } finally {
        setLoading(false)
      }
    }

    fetchCodePreview()
  }, [template, params, chainId, PREVIEW_API_URL])

  const handleCopy = () => {
    navigator.clipboard.writeText(code)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <Paper
      elevation={0}
      sx={{
        p: 3,
        height: '100%',
        background: 'linear-gradient(135deg, rgba(26, 32, 46, 0.9) 0%, rgba(17, 24, 39, 0.95) 100%)',
        backdropFilter: 'blur(10px)',
        border: '1px solid',
        borderColor: 'rgba(92, 107, 192, 0.2)',
        borderRadius: 2,
        position: 'relative',
      }}
    >
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            {t('codeViewer.title')}
          </Typography>
          <Chip
            label="Generated by ContractForge.io"
            size="small"
            sx={{
              background: 'linear-gradient(135deg, #5C6BC0 0%, #7E57C2 100%)',
              color: 'white',
              fontWeight: 500,
              fontSize: '0.75rem',
              height: 24,
              '& .MuiChip-label': {
                px: 2,
              },
            }}
          />
          {loading && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <CircularProgress size={16} />
              <Typography variant="caption" color="text.secondary">
                Generating...
              </Typography>
            </Box>
          )}
        </Box>
        <Tooltip title={copied ? t('codeViewer.copied') : t('codeViewer.copy')}>
          <IconButton onClick={handleCopy} size="small" disabled={loading}>
            {copied ? <Check /> : <ContentCopy />}
          </IconButton>
        </Tooltip>
      </Box>

              <Box
          sx={{
            backgroundColor: '#1e1e1e',
            borderRadius: 1,
            overflow: 'hidden',
            position: 'relative',
            '&::before': {
              content: '"Generated by ContractForge.io"',
              position: 'absolute',
              top: 8,
              right: 16,
              fontSize: '0.75rem',
              color: 'rgba(255, 255, 255, 0.3)',
              fontFamily: 'monospace',
              zIndex: 1,
            },
          }}
        >
          {error && (
            <Box sx={{ p: 2, bgcolor: 'error.dark', color: 'error.contrastText' }}>
              <Typography variant="body2">
                ‚ö†Ô∏è {error}
              </Typography>
            </Box>
          )}
        <Box
          sx={{
            maxHeight: '600px',
            overflow: 'auto',
            '&::-webkit-scrollbar': {
              width: '8px',
            },
            '&::-webkit-scrollbar-track': {
              background: 'rgba(255, 255, 255, 0.1)',
            },
            '&::-webkit-scrollbar-thumb': {
              background: 'rgba(92, 107, 192, 0.5)',
              borderRadius: '4px',
              '&:hover': {
                background: 'rgba(92, 107, 192, 0.7)',
              },
            },
          }}
        >
          <SyntaxHighlighter
            language="solidity"
            style={vscDarkPlus}
            customStyle={{
              margin: 0,
              padding: '1rem',
              background: 'transparent',
              fontSize: '0.875rem',
              lineHeight: '1.5',
            }}
            showLineNumbers
          >
            {code}
          </SyntaxHighlighter>
        </Box>
      </Box>
      <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>
        <Typography
          variant="caption"
          sx={{
            color: 'text.secondary',
            textAlign: 'center',
            '& a': {
              color: '#5C6BC0',
              textDecoration: 'none',
              '&:hover': {
                textDecoration: 'underline',
              },
            },
          }}
        >
          Smart contracts audited and secured by{' '}
          <a href="https://openzeppelin.com/contracts/" target="_blank" rel="noopener noreferrer">
            OpenZeppelin
          </a>
        </Typography>
      </Box>
    </Paper>
  )
}

export default CodeViewer